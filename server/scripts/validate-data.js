require('dotenv').config();
const mongoose = require('mongoose');
const RegistroPratica = require('../models/RegistroPratica');
const Pratica = require('../models/Pratica');

async function validateData() {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    console.log('Conectado ao MongoDB');

    // Buscar registros de pr√°tica √≥rf√£os
    const registrosOrfaos = await RegistroPratica.find({})
      .populate('pratica')
      .lean();

    const orfaos = registrosOrfaos.filter(reg => !reg.pratica);
    
    console.log(`\nüìä RELAT√ìRIO DE VALIDA√á√ÉO DE DADOS`);
    console.log(`Total de registros de pr√°ticas: ${registrosOrfaos.length}`);
    console.log(`Registros √≥rf√£os (sem pr√°tica): ${orfaos.length}`);
    
    if (orfaos.length > 0) {
      console.log(`\n‚ö†Ô∏è  REGISTROS √ìRF√ÉOS ENCONTRADOS:`);
      orfaos.forEach((registro, index) => {
        console.log(`${index + 1}. ID: ${registro._id}, User: ${registro.user}, Data: ${registro.createdAt}`);
      });
      
      console.log(`\nüîß OP√á√ïES DE CORRE√á√ÉO:`);
      console.log(`1. Deletar registros √≥rf√£os: node scripts/validate-data.js --delete-orphans`);
      console.log(`2. Criar pr√°ticas padr√£o para √≥rf√£os: node scripts/validate-data.js --create-default`);
    } else {
      console.log(`‚úÖ Nenhum registro √≥rf√£o encontrado!`);
    }

    // Verificar se foi solicitada corre√ß√£o
    const args = process.argv.slice(2);
    
    if (args.includes('--delete-orphans') && orfaos.length > 0) {
      console.log(`\nüóëÔ∏è  Deletando ${orfaos.length} registros √≥rf√£os...`);
      const orfaoIds = orfaos.map(o => o._id);
      await RegistroPratica.deleteMany({ _id: { $in: orfaoIds } });
      console.log(`‚úÖ Registros √≥rf√£os deletados com sucesso!`);
    }
    
    if (args.includes('--create-default') && orfaos.length > 0) {
      console.log(`\nüîß Criando pr√°tica padr√£o...`);
      
      // Criar uma pr√°tica padr√£o se n√£o existir
      let praticaPadrao = await Pratica.findOne({ titulo: 'Pr√°tica N√£o Identificada' });
      
      if (!praticaPadrao) {
        praticaPadrao = await Pratica.create({
          titulo: 'Pr√°tica N√£o Identificada',
          descricao: 'Pr√°tica criada automaticamente para corrigir dados √≥rf√£os',
          categoria: 'geral',
          duracao: 10
        });
      }
      
      // Atualizar registros √≥rf√£os
      const orfaoIds = orfaos.map(o => o._id);
      await RegistroPratica.updateMany(
        { _id: { $in: orfaoIds } },
        { pratica: praticaPadrao._id }
      );
      
      console.log(`‚úÖ ${orfaos.length} registros √≥rf√£os vinculados √† pr√°tica padr√£o!`);
    }

  } catch (error) {
    console.error('Erro na valida√ß√£o:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nValida√ß√£o conclu√≠da. Conex√£o fechada.');
  }
}

validateData(); 